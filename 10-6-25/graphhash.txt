import java.util.HashSet;

public class App {
    public static void main(String[] args) {
        Graph g = new Graph(5, false); 
        g.addEdge(0, 1);
        g.addEdge(1, 2);
        g.addEdge(2, 3);
        g.addEdge(3, 4);
        g.addEdge(4, 0);

        g.printGraph();
    }
}

class Edge {
    int src;
    int dest;
    int weight;

    Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    Edge(int src, int dest) {
        this(src, dest, 1); 
    }

    @Override
    public String toString() {
        return "(" + src + " -> " + dest + ", weight=" + weight + ")";
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Edge)) return false;
        Edge other = (Edge) obj;
        return this.src == other.src && this.dest == other.dest && this.weight == other.weight;
    }

    @Override
    public int hashCode() {
        return Integer.hashCode(src) * 31 + Integer.hashCode(dest) * 17 + Integer.hashCode(weight);
    }
}

class Graph {
    HashSet<Edge> edges;
    int vertices;
    boolean isDirected;

    Graph(int vertices, boolean isDirected) {
        this.vertices = vertices;
        this.isDirected = isDirected;
        this.edges = new HashSet<>();
    }

    public void addEdge(int src, int dest) {
        Edge e1 = new Edge(src, dest);
        edges.add(e1);
        if (!isDirected) {
            Edge e2 = new Edge(dest, src);
            edges.add(e2);
        }
    }

    public void printGraph() {
        for (Edge e : edges) {
            System.out.println(e);
        }
    }
}
